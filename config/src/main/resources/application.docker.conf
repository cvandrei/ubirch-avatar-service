include "application.base.conf"

# this variables have to be replaced
# * SERVICE_IP
# ** IP adresse service should bind to, e.g. 127.0.0.1 or 0.0.0.0
# # * SERVICE_PORT
# ** port which service should use, e.g. 8080
# * CLUSTER_NAME
# ** name of the used elasticsearch cluster, default is elasticsearch
# * ES_HOST
# ** hostname of ElastisSearch 2.x cluster, without a protocol, e.g. localhost
# * ES_PORT_TCP
# ** e.g. 9300
# * ES_PORT_HTTP
# ** e.g. 9200
# * SQS_UBIRCH_TRANSFORMER_INBOX
# ** recommandation: ENVPREFIX_ubirch_transformer_inbox, e.g. devenv_ubirch_transformer_inbox
# * SQS_UBIRCH_TRANSFORMER_OUTBOX
# ** recommandation: ENVPREFIX_ubirch_transformer_outbox, e.g. devenv_ubirch_transformer_outbox
# * UBIRCH_NOTARYSERVICE_URL
# ** url of ubirchNotarySerive, e.g. http://52.57.156.139:8080/v1/notary/notarize
# * ENVID
# ** short string which will used to seperate different deployment enviroments, e.g. ubdev, ubmwc, trdev
# ** have to be unique for each deployment enviroment
# * MQTT_USER
# ** MQTT server username
# * MQTT_PASSWORD
# ** MQTT server password
# * MQTT_URL
# ** MQTT server url

akka {
  loglevel = INFO
  http {
    verbose-error-messages = off
    server {
      idle-timeout = 90s
      request-timeout = 60s
      remote-address-header = on
      # The value of the `Server` header to produce.
      # Set to the empty string to disable rendering of the server header.
      server-header = ubirch-avatar-service
    }
  }
}

ubirchAvatarService {

  interface = 0.0.0.0
  port = 8080

  es {
    clustername = ${CLUSTER_NAME}
    host = ${ES_HOST}
    port {
      binary = ${ES_PORT_TCP}
      rest = ${ES_PORT_HTTP}
    }
  }

  aws {
    localmode = false

    sqs {
      queues {
        transformer = ${SQS_UBIRCH_TRANSFORMER_INBOX}
        transformer_out = "${SQS_UBIRCH_TRANSFORMER_OUTBOX}"
      }
    }
  }
  iot {
    env {
      prefix = ${ENVID}_
    }
  }
}

notaryService {
  client {
    url = ${UBIRCH_NOTARYSERVICE_URL}
  }
}

mqtt {
  broker {
    //      url = "tcp://localhost:1883"
    url = ${MQTT_URL}
  }
  queues {
    devicesin = ${ENVID}"/ubirch/devices/+/in/raw"
    devicesout = ${ENVID}"/ubirch/devices/DEVICEID/out"
  }
  qos = 1
}
