include "application.base.conf"

akka {

  // Akka Cluster Start
  //  actor {
  //    provider = "akka.cluster.ClusterActorRefProvider"
  //  }
  //
  //  remote {
  //    log-remote-lifecycle-events = off
  //    netty.tcp {
  //      hostname = "127.0.0.1"
  //      port = 0
  //    }
  //  }

  //  cluster {
  //    //    seed-nodes = [
  //    //      "akka.tcp://AvatarService@127.0.0.1:2551"
  //    //    ]
  //
  //    # auto downing is NOT safe for production deployments.
  //    # you may want to use it during development, read more about it in the docs.
  //    #
  //    auto-down-unreachable-after = 10s
  //  }
  // Akka Cluster Start

  actor.default-dispatcher {

    fork-join-executor {
      parallelism-factor = 2.0
      parallelism-max = 4
    }

    # Throughput defines the maximum number of messages to be
    # processed per actor before the thread jumps to the next actor.
    # Set to 1 for as fair as possible.
    throughput = 10
  }
}

ubirchAvatarService {
  client {
    rest {
      userToken = ${?USER_TOKEN}
    }
  }
}

// Akka Cluster Start
//constructr {
//  coordination {
//    host = localhost
//    port = 2379
//  }
//
//  coordination-timeout = 3 seconds  // Maximum response time for coordination service (e.g. etcd)
//  join-timeout = 15 seconds // Might depend on cluster size and network properties
//  max-nr-of-seed-nodes = 0          // Any nonpositive value means Int.MaxValue
//  nr-of-retries = 2          // Nr. of tries are nr. of retries + 1
//  refresh-interval = 30 seconds // TTL is refresh-interval * ttl-factor
//  retry-delay = 3 seconds  // Give coordination service (e.g. etcd) some delay before retrying
//  ttl-factor = 2.0        // Must be greater or equal 1 + ((coordination-timeout * (1 + nr-of-retries) + retry-delay * nr-of-retries)/ refresh-interval)!
//  ignore-refresh-failures = false      // Ignore failures once machine is already in "Refreshing" state. It prevents from FSM being terminated due to exhausted number of retries.
//
//}
//
////akka.extensions=["de.heikoseeberger.constructr.ConstructrExtension","akka.cluster.metrics.ClusterMetricsExtension"]
//akka.extensions = ["de.heikoseeberger.constructr.ConstructrExtension"]
// Akka Cluster End