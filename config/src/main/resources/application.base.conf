akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  loglevel = DEBUG
  log-config-on-start = off
  debug {
    receive = on
    autoreceive = off
    lifecycle = off
  }
  http {
    verbose-error-messages = off
    server {
      idle-timeout = 90s
      request-timeout = 60s
      remote-address-header = on
      # The value of the `Server` header to produce.
      # Set to the empty string to disable rendering of the server header.
      server-header = ubirch-avatar-service
    }
  }
}

ubirchAvatarService {
  protocol = "http://"
  interface = "localhost"
  //  interface = "0.0.0.0"
  port = 8080

  es {
    host = "localhost"

    port {
      binary = 9300
      rest = 9200
    }

    defaultPageSize = 10
    device {
      index = "ubirch-devices"
      type = "device"
    }

    devicerawdata {
      index = "ubirch-device-raw-data"
      type = "devicemessage"
    }

    devicehistory {
      index = "ubirch-device-history"
      type = "devicedata"
    }

    devicetype {
      index = "ubirch-device-type"
      type = "devicetype"
    }
  }

  aws {
    localmode = true

    awsaccesskey = ${AWS_ACCESS_KEY_ID}
    awssecretaccesskey = ${AWS_SECRET_ACCESS_KEY}

    topics {
      basename = "$aws/things/%s/shadow"
    }

    states {
      desired = "desired"
      reported = "reported"
      delta = "delta"
      timestamp = "timestamp"
    }

    sqs {
      queues {
        transformer = ubirch_transformer_inbox
        transformer_out = ubirch_transformer_outbox
      }
    }
  }

  mqtt {
    broker {
      url = "tcp://localhost:1883"
    }
    credentials {
      //      user = ${MQTT_USER}
      user = MQTT_USER
      //      password = ${MQTT_PASSWORD}
      password = MQTT_PASSWORD
    }
    queues {
      devicesin = "ubirch/devices/+/in/raw"
    }
    qos = 1

  }
}

restclient {
  timeout {
    connect = 15000
    read = 15000
  }
}

notaryService {
  client {
    url = "http://52.57.156.139:8080/v1/notary/notarize"
  }
}
