akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  loglevel = DEBUG
  log-config-on-start = off
  debug {
    receive = on
    autoreceive = off
    lifecycle = off
  }
  http {
    verbose-error-messages = off
    server {
      idle-timeout = 900s
      request-timeout = 60s
      remote-address-header = on
      # The value of the `Server` header to produce.
      # Set to the empty string to disable rendering of the server header.
      server-header = ubirch-avatar-service
    }
    client {
      idle-timeout = 900s
    }
  }
}

rediscala {
  loglevel = "INFO"
  rediscala-client-worker-dispatcher {
    mailbox-type = "akka.dispatch.SingleConsumerOnlyUnboundedMailbox"
    # Throughput defines the maximum number of messages to be
    # processed per actor before the thread jumps to the next actor.
    # Set to 1 for as fair as possible.
    throughput = 512
  }
}

ubirchAvatarService {

  gopipelinename = "noName"
  gopipelinename = ${?GO_PIPELINE_NAME_AVATAR}
  gopipelinelabel = "noLabel"
  gopipelinelabel = ${?GO_PIPELINE_LABEL_AVATAR}
  gopipelinerev = "noRev"
  gopipelinerev = ${?GO_REVISION_AVATAR}

  enviroment = "local"
  enviroment = ${?ENVID}

  protocol = "http://"
  interface = "localhost"
  //  interface = "0.0.0.0"
  port = 8080

  akka {
    actorTimeout = 15
    numberOfWorkers = 2
  }

  es {

    defaultPageSize = 10
    largePageSize = 10000

    device {
      index = "ubirch-devices"
      type = "device"
    }

    devicerawdata {
      index = "ubirch-device-raw-data"
      type = "devicemessage"
    }

    devicerawdataAnchored {
      index = "ubirch-device-raw-data-anchored"
      type = "devicemessage"
    }

    devicehistory {
      index = "ubirch-device-history"
      type = "devicedata"
    }

    devicetype {
      index = "ubirch-device-type"
      type = "devicetype"
    }

    devicestate {
      index = "ubirch-device-state"
      type = "devicestate"
    }

    avatarState {
      index = "ubirch-avatar-state"
      type = "avatarstate"
    }

  }

  aws {
    localmode = true

    awsaccesskey = ${?AWS_ACCESS_KEY_ID}
    awssecretaccesskey = ${?AWS_SECRET_ACCESS_KEY}

    topics {
      basename = "$aws/things/%s/shadow"
    }

    states {
      desired = "desired"
      reported = "reported"
      delta = "delta"
      timestamp = "timestamp"
    }

    sqs {
      queues {
        transformer = localdev_ubirch_transformer_inbox
        transformer_out = localdev_ubirch_transformer_outbox
      }
    }
    iot {
      env {
        prefix = local
      }
    }
  }

  mqtt {
    broker {
      //      url = "tcp://localhost:1883"
      url = "tcp://mq2.dev.ubirch.com:1883"
    }
    credentials {
      user = ${?MQTT_USER}
      password = ${?MQTT_PASSWORD}
    }
    queues {
      deviceBaseTopic = "localdev/ubirch/devices"
      devicesTopicPartIn = "in"
      devicesTopicPartOut = "out"
      devicesTopicPartProcessed = "processed"
    }

    publishProcessed = true
    qos = 1

  }

  restclient {
    timeout {
      connect = 15000
      read = 15000
    }
  }
}

notaryService {
  client {
    url = "http://notary-dev.api.ubirch.com:8080/v1/notaryService/notarize"
    url = ${?UBIRCH_NOTARYSERVICE_URL}
  }
}

esBinaryClient {
  connection {
    hosts = ["localhost:9300"]
    settings = [
      { "cluster.name": "elasticsearch" }
    ]
  }
  bulk {
    bulkActions = 10000
    bulkSize = 10 # bulkSize in mega bytes
    flushInterval = 1 # flush every x seconds
    concurrentRequests = 2 # connection pooling: max concurrent requests
  }
}

ubirchUserService.client.rest.host = "http://localhost:8092"

ubirch {

  oidcUtils {
    redis {
      updateExpiry = 1800 // seconds (30 minutes)
    }
  }

  redisUtil {
    host = localhost
    port = 6379
    password = ${?REDIS_PASSOWRD}
  }

}
